name: Monitor URL Changes

on:
  workflow_dispatch:
  push:
    branches:
      - "*"
  schedule:
    - cron: '0 23,0-13 * * *'  # 每天 7:00 到 21:00 每小时运行一次

permissions:
  contents: write

jobs:
  check_url_changes:
    runs-on: ubuntu-latest
    env:
      SCTKEY: ${{ secrets.SCTKEY }}
      WEBHOOK_URLS: ${{ secrets.WEBHOOK_URLS }}
      CHECK_URLS: |
        https://ztb.cxjw.hangzhou.gov.cn:8092/search/queryContents.jhtml?titleOrCode=%E5%9F%8E%E5%B8%82%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A&status=5&channelId=2331
        https://ztb.cxjw.hangzhou.gov.cn:8092/search/queryContents.jhtml?titleOrCode=%E5%9F%8E%E5%B8%82%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A&status=5&channelId=2332
        https://ztb.cxjw.hangzhou.gov.cn:8092/search/queryContents.jhtml?titleOrCode=%E5%9F%8E%E5%B8%82%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A&status=5&channelId=3508
        https://ztb.cxjw.hangzhou.gov.cn:8092/search/queryContents.jhtml?titleOrCode=%E5%9F%8E%E5%B8%82%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A&status=5&channelId=3509
        https://ztb.cxjw.hangzhou.gov.cn:8092/search/queryContents.jhtml?titleOrCode=%E5%9F%8E%E5%B8%82%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A&status=5&channelId=3510
        https://ztb.cxjw.hangzhou.gov.cn:8092/search/queryContents.jhtml?titleOrCode=%E5%9F%8E%E5%B8%82%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A&status=5&channelId=3511
        https://ztb.cxjw.hangzhou.gov.cn:8092/search/queryContents.jhtml?titleOrCode=%E5%9F%8E%E5%B8%82%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A&status=5&channelId=3512
        https://ztb.cxjw.hangzhou.gov.cn:8092/jyxxjhfb
        https://ztb.cxjw.hangzhou.gov.cn:8092/jyxxygs
        https://ztb.cxjw.hangzhou.gov.cn:8092/jyxxwj
        https://github.com/rzhy1/aria2-static-build/blob/main/.github/workflows/build_and_release.yml
      URL_DESCRIPTIONS: |
        {"https://ztb.cxjw.hangzhou.gov.cn:8092/search/queryContents.jhtml?titleOrCode=%E5%9F%8E%E5%B8%82%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A&status=5&channelId=2331": "杭州地铁招标计划发布",
         "https://ztb.cxjw.hangzhou.gov.cn:8092/search/queryContents.jhtml?titleOrCode=%E5%9F%8E%E5%B8%82%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A&status=5&channelId=2332": "杭州地铁招标预公示",
         "https://ztb.cxjw.hangzhou.gov.cn:8092/search/queryContents.jhtml?titleOrCode=%E5%9F%8E%E5%B8%82%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A&status=5&channelId=3508": "杭州地铁特别提醒项目",
         "https://ztb.cxjw.hangzhou.gov.cn:8092/search/queryContents.jhtml?titleOrCode=%E5%9F%8E%E5%B8%82%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A&status=5&channelId=3509": "杭州地铁招标核准项目",
         "https://ztb.cxjw.hangzhou.gov.cn:8092/search/queryContents.jhtml?titleOrCode=%E5%9F%8E%E5%B8%82%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A&status=5&channelId=3510": "杭州地铁招标文件公示",
         "https://ztb.cxjw.hangzhou.gov.cn:8092/search/queryContents.jhtml?titleOrCode=%E5%9F%8E%E5%B8%82%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A&status=5&channelId=3511": "杭州地铁中标公示",
         "https://ztb.cxjw.hangzhou.gov.cn:8092/search/queryContents.jhtml?titleOrCode=%E5%9F%8E%E5%B8%82%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A&status=5&channelId=3512": "杭州地铁中标结果",
         "https://ztb.cxjw.hangzhou.gov.cn:8092/jyxxjhfb": "杭州建设项目 招标计划发布",
         "https://ztb.cxjw.hangzhou.gov.cn:8092/jyxxygs": "杭州建设项目 招标预公示",
         "https://ztb.cxjw.hangzhou.gov.cn:8092/jyxxwj": "杭州建设项目 招标文件公示",
         "https://github.com/rzhy1/aria2-static-build/blob/main/.github/workflows/build_and_release.yml": "测试专用"}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          pip install requests beautifulsoup4

      - name: Check for URL changes
        id: check_changes
        run: |
          python - << "EOF"
          import os
          import json
          import hashlib
          import requests
          import random
          import time
          from bs4 import BeautifulSoup
          from requests.adapters import HTTPAdapter
          from urllib3.util.retry import Retry

          # 创建带有重试机制的 Session
          def create_session_with_retries(retries=3, backoff_factor=0.3, status_forcelist=(500, 502, 503, 504)):
              session = requests.Session()
              retry_strategy = Retry(
                  total=retries,
                  read=retries,
                  connect=retries,
                  backoff_factor=backoff_factor,
                  status_forcelist=status_forcelist,
                  allowed_methods=["HEAD", "GET", "POST"]
              )
              adapter = HTTPAdapter(max_retries=retry_strategy)
              session.mount("http://", adapter)
              session.mount("https://", adapter)
              return session

          # 检查 URL 内容并返回清理后的哈希值
          def check_url(session, url, user_agent):
              headers = {
                  "User-Agent": user_agent,
                  "Cache-Control": "no-cache",
                  "Pragma": "no-cache"
              }
              try:
                  response = session.get(url, headers=headers, timeout=10)
                  response.raise_for_status()
                  soup = BeautifulSoup(response.text, 'html.parser')
                  # 移除脚本和样式标签
                  for script in soup(["script", "style"]):
                      script.decompose()

                  # 尝试获取主要内容
                  content_selectors = [
                      ('div', {'class': 'menu menu_time'}),
                      ('div', {'id': 'main-content'}),
                      ('section', {'role': 'main'})
                  ]
                  main_content = None
                  for tag, attrs in content_selectors:
                      main_content = soup.find(tag, attrs=attrs)
                      if main_content:
                          break

                  if main_content is None:
                      # 未找到主要内容区域，使用全页内容
                      text = soup.get_text(separator='\n', strip=True)
                      cleaned_text = '\n'.join([line for line in text.split('\n') if line.strip()])
                      print(f"未找到主要内容区域，使用全页内容: {url}")
                  else:
                      # 提取主要内容
                      text = main_content.get_text(separator='\n', strip=True)
                      cleaned_text = '\n'.join([line for line in text.split('\n') if line.strip()])

                  # 生成哈希值
                  current_hash = hashlib.sha256(cleaned_text.encode()).hexdigest()
                  return current_hash
              except Exception as e:
                  print(f"检查 URL {url} 时出错: {e}")
                  return None
              finally:
                  time.sleep(random.uniform(1, 3))  # 添加随机延迟

          # 发送 Server酱 通知
          def send_Server酱_notification(sctkey, title, message):
              if not sctkey:
                  print("SCTKEY 未设置或为空。")
                  return
              notify_url = f"https://sctapi.ftqq.com/{sctkey}.send"
              data = {
                  "title": "招标信息更新",
                  "desp": message
              }
              try:
                  response = requests.post(notify_url, data=data, timeout=10)
                  if response.status_code == 200:
                      print("Server酱 通知发送成功。")
                  else:
                      print(f"发送 Server酱 通知失败: {response.status_code}")
              except Exception as e:
                  print(f"发送 Server酱 通知出错: {e}")

          # 发送企业微信通知
          def send_wechat_notification(session, webhook_url, note, message):
              payload = {
                  "msgtype": "markdown",
                  "markdown": {
                      "content": "### 网页更新通知：\n" + "\n".join(message)
                  }
              }
              try:
                  response = session.post(webhook_url, json=payload, timeout=10)
                  if response.status_code == 200:
                      print(f"成功发送通知到企业微信机器人: {note}")
                  else:
                      print(f"发送企业微信通知失败: {response.status_code}, {note}")
              except Exception as e:
                  print(f"发送企业微信通知出错: {e}, {note}")

          # 主函数
          def main():
              # 从环境变量获取密钥和 URL 列表
              sctkey = os.getenv("SCTKEY")
              webhook_urls_raw = os.getenv("WEBHOOK_URLS")
              check_urls = os.getenv("CHECK_URLS").splitlines()
              url_descriptions = json.loads(os.getenv("URL_DESCRIPTIONS"))
              # 固定 User-Agent
              user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
              # 状态文件路径
              state_file = os.path.join(os.environ['GITHUB_WORKSPACE'], 'url_state2.json')

              # 如果状态文件不存在，创建一个空的 JSON 文件
              if not os.path.exists(state_file):
                  with open(state_file, 'w') as f:
                      json.dump({}, f)
                  print(f"状态文件 {state_file} 不存在，已创建新文件")

              # 读取之前的状态
              previous_states = {}
              if os.path.exists(state_file):
                  with open(state_file, 'r') as f:
                      previous_states = json.load(f)
                  print(f"从文件 {state_file} 加载了之前的状态，共 {len(previous_states)} 条记录")
              else:
                  print(f"状态文件 {state_file} 不存在，将初始化新文件")

              # 创建带重试机制的 Session
              session = create_session_with_retries()

              # 检查当前状态
              current_states = {}
              changed_urls = []

              for url in check_urls:
                  current_hash = check_url(session, url, user_agent)
                  if current_hash:
                      current_states[url] = current_hash
                      if url in previous_states and previous_states[url] != current_hash:
                          description = url_descriptions.get(url, "未知来源")
                          print(f"检测到变化：{description} ({url})")
                          changed_urls.append(f"- {description}: {url}")

              # 如果检测到变化，发送通知
              if changed_urls:
                  # 解析 Webhook 地址
                  try:
                      if webhook_urls_raw.startswith('[') and webhook_urls_raw.endswith(']'):
                          webhook_list = json.loads(webhook_urls_raw)
                      else:
                          webhook_list = [{"url": url.strip(), "note": ""} for url in webhook_urls_raw.splitlines()]
                  except Exception as e:
                      print(f"解析 WEBHOOK_URLS 出错: {e}")
                      exit(1)

                  # 发送 Server酱 通知
                  send_Server酱_notification(sctkey, "招标信息更新", "\n".join(changed_urls))

                  # 发送消息到企业微信机器人
                  for webhook_info in webhook_list:
                      webhook_url = webhook_info.get("url")
                      note = webhook_info.get("note", "")
                      if not webhook_url:
                          print(f"警告: 在备注 '{note}' 的条目中缺少 URL，跳过...")
                          continue
                      send_wechat_notification(session, webhook_url, note, changed_urls)
              else:
                  print("未检测到任何变化")

              # 保存当前状态
              with open(state_file, 'w') as f:
                  json.dump(current_states, f)

          if __name__ == "__main__":
              main()
          EOF

      - name: Commit and push state file
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          if git diff --quiet url_state2.json; then
            echo "No changes detected in url_state2.json."
          else
            echo "Changes detected in url_state2.json, preparing to commit..."
            git add url_state2.json
            git commit -m "Update URL states [skip ci]" || echo "No changes to commit."
            git push origin HEAD || echo "Push failed, please check permissions or network issues."
            echo "状态文件已更新并提交"
          fi
