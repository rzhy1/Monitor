name: Monitor1 URL Changes

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/monitor1.yml'
      - 'url_state1.json'
  schedule:
    - cron: '0 23,0-13 * * *'

permissions:
  contents: write

jobs:
  check_url_changes:
    runs-on: ubuntu-latest
    env:
      WECHAT_APP_ID: ${{ secrets.WECHAT_APP_ID }}
      WECHAT_APP_SECRET: ${{ secrets.WECHAT_APP_SECRET }}
      WECHAT_TEMPLATE_ID: ${{ secrets.WECHAT_TEMPLATE_ID }}
      WECHAT_TO_USER: ${{ secrets.WECHAT_TO_USER }}
      CHECK_URLS: |
        https://ztb.cxjw.hangzhou.gov.cn:8092/search/queryContents.jhtml?titleOrCode=%E5%9F%8E%E5%B8%82%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A&status=5&channelId=2331
        https://ztb.cxjw.hangzhou.gov.cn:8092/search/queryContents.jhtml?titleOrCode=%E5%9F%8E%E5%B8%82%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A&status=5&channelId=2332
        https://ztb.cxjw.hangzhou.gov.cn:8092/search/queryContents.jhtml?titleOrCode=%E5%9F%8E%E5%B8%82%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A&status=5&channelId=3508
        https://ztb.cxjw.hangzhou.gov.cn:8092/search/queryContents.jhtml?titleOrCode=%E5%9F%8E%E5%B8%82%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A&status=5&channelId=3509
        https://ztb.cxjw.hangzhou.gov.cn:8092/search/queryContents.jhtml?titleOrCode=%E5%9F%8E%E5%B8%82%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A&status=5&channelId=3510
        https://ztb.cxjw.hangzhou.gov.cn:8092/search/queryContents.jhtml?titleOrCode=%E5%9F%8E%E5%B8%82%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A&status=5&channelId=3511
        https://ztb.cxjw.hangzhou.gov.cn:8092/search/queryContents.jhtml?titleOrCode=%E5%9F%8E%E5%B8%82%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A&status=5&channelId=3512
        https://github.com/rzhy1/aria2-static-build/blob/main/.github/workflows/build_and_release.yml
      URL_DESCRIPTIONS: |
        {"https://ztb.cxjw.hangzhou.gov.cn:8092/search/queryContents.jhtml?titleOrCode=%E5%9F%8E%E5%B8%82%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A&status=5&channelId=2331": "杭州地铁招标计划发布",
         "https://ztb.cxjw.hangzhou.gov.cn:8092/search/queryContents.jhtml?titleOrCode=%E5%9F%8E%E5%B8%82%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A&status=5&channelId=2332": "杭州地铁招标预公示",
         "https://ztb.cxjw.hangzhou.gov.cn:8092/search/queryContents.jhtml?titleOrCode=%E5%9F%8E%E5%B8%82%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A&status=5&channelId=3508": "杭州地铁特别提醒项目",
         "https://ztb.cxjw.hangzhou.gov.cn:8092/search/queryContents.jhtml?titleOrCode=%E5%9F%8E%E5%B8%82%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A&status=5&channelId=3509": "杭州地铁招标核准项目",
         "https://ztb.cxjw.hangzhou.gov.cn:8092/search/queryContents.jhtml?titleOrCode=%E5%9F%8E%E5%B8%82%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A&status=5&channelId=3510": "杭州地铁招标文件公示",
         "https://ztb.cxjw.hangzhou.gov.cn:8092/search/queryContents.jhtml?titleOrCode=%E5%9F%8E%E5%B8%82%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A&status=5&channelId=3511": "杭州地铁中标公示",
         "https://ztb.cxjw.hangzhou.gov.cn:8092/search/queryContents.jhtml?titleOrCode=%E5%9F%8E%E5%B8%82%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A&status=5&channelId=3512": "杭州地铁中标结果",
         "https://github.com/rzhy1/aria2-static-build/blob/main/.github/workflows/build_and_release.yml": "测试专用"}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 urllib3

      - name: Check and notify
        run: |
          python - << "EOF"
          import os
          import json
          import hashlib
          import time
          import re
          import requests
          from bs4 import BeautifulSoup
          
          STATE_FILE = "url_state1.json"
          USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"

          class Monitor:
              def __init__(self):
                  self.session = requests.Session()
                  self.check_urls = [u.strip() for u in os.getenv("CHECK_URLS").splitlines() if u.strip()]
                  self.url_descriptions = json.loads(os.getenv("URL_DESCRIPTIONS"))
                  self.wechat_app_id = os.getenv("WECHAT_APP_ID")
                  self.wechat_app_secret = os.getenv("WECHAT_APP_SECRET")
                  self.wechat_template_id = os.getenv("WECHAT_TEMPLATE_ID")
                  self.wechat_to_user = os.getenv("WECHAT_TO_USER")

              def extract_project_titles(self, html, current_url):
                  """提取项目标题和链接"""
                  soup = BeautifulSoup(html, 'html.parser')
                  titles_with_links = []
                  
                  # 尝试多种选择器
                  selectors = [
                      'div.menu.menu_time',
                      'div.list > div',
                      '.listWrap .list > div'
                  ]
                  
                  menu_divs = []
                  for selector in selectors:
                      menu_divs = soup.select(selector)
                      if menu_divs:
                          break
                  
                  if not menu_divs:
                      menu_divs = soup.find_all('div', onclick=lambda x: x and 'window.open' in x)
                  
                  for div in menu_divs:
                      title_element = div.find('h3') or div.find('a') or div
                      title_text = title_element.get_text(strip=True)
                      
                      if not title_text or len(title_text) < 5:
                          continue
                          
                      # 提取链接
                      onclick = div.get('onclick', '')
                      detail_url = current_url
                      
                      if onclick and 'window.open' in onclick:
                          match = re.search(r"window\.open\s*\(\s*['\"]([^'\"]+)['\"]", onclick)
                          if match:
                              detail_path = match.group(1)
                              if detail_path.startswith('/'):
                                  detail_url = f"https://ztb.cxjw.hangzhou.gov.cn:8092{detail_path}"
                              else:
                                  detail_url = detail_path
                      
                      titles_with_links.append((title_text, detail_url))
                  
                  return titles_with_links

              def get_content_hash(self, url):
                  try:
                      r = self.session.get(url, headers={'User-Agent': USER_AGENT}, timeout=10)
                      r.raise_for_status()
                      
                      # 提取项目标题
                      titles_with_links = self.extract_project_titles(r.text, url)
                      sorted_titles = sorted([title for title, link in titles_with_links])
                      content_for_hash = "\n".join(sorted_titles)
                      
                      return hashlib.sha256(content_for_hash.encode()).hexdigest(), titles_with_links
                  except Exception as e:
                      print(f"[ERROR] {url} 获取失败: {e}")
                      return None, []

              def load_state(self):
                if os.path.exists(STATE_FILE):
                    try:
                        with open(STATE_FILE, 'r', encoding='utf-8') as f:
                            return json.load(f)
                    except json.JSONDecodeError:
                        print(f"[WARN] {STATE_FILE} 内容格式错误，已重置为空 JSON")
                        return {}
                return {}

              def save_state(self, state):
                  with open(STATE_FILE, 'w', encoding='utf-8') as f:
                      json.dump(state, f, ensure_ascii=False, indent=2)

              def get_wechat_access_token(self):
                  url = f"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid={self.wechat_app_id}&secret={self.wechat_app_secret}"
                  try:
                      r = self.session.get(url, timeout=10).json()
                      return r.get("access_token")
                  except Exception as e:
                      print(f"[ERROR] 获取 access_token 失败: {e}")
                      return None

              def send_wechat_template_message(self, access_token, title, new_titles, all_titles, url_desc):
                  """发送微信模板消息 - 特别突出显示新增标题"""
                  send_url = f"https://api.weixin.qq.com/cgi-bin/message/template/send?access_token={access_token}"
                  
                  # 构建消息内容
                  new_titles_text = "\n".join([f"🔴 {title}" for title in new_titles])
                  all_titles_text = "\n".join([f"• {title}" for title, link in all_titles[:15]])  # 最多显示15条
                  if len(all_titles) > 15:
                      all_titles_text += f"\n...等{len(all_titles)}条内容"
                  
                  # 使用标准字段格式
                  data = {
                      "touser": self.wechat_to_user,
                      "template_id": self.wechat_template_id,
                      "url": url_desc,
                      "data": {
                          "first": {"value": "🚨 发现新增内容！", "color": "#FF0000"},
                          "keyword1": {"value": title, "color": "#173177"},
                          "keyword2": {"value": f"新增{len(new_titles)}条", "color": "#FF0000"},
                          "keyword3": {"value": time.strftime('%Y-%m-%d %H:%M:%S'), "color": "#173177"},
                          "remark": {"value": f"新增内容：\n{new_titles_text}\n\n所有内容：\n{all_titles_text}\n\n点击查看详情", "color": "#173177"}
                      }
                  }
                  
                  try:
                      r = self.session.post(send_url, json=data, timeout=15).json()
                      if r.get("errcode") == 0:
                          print(f"✅ 微信消息发送成功: {title}")
                          return True
                      else:
                          print(f"❌ 微信消息发送失败: {r.get('errmsg')}")
                          
                          # 备用方案：使用通用字段格式
                          data_alt = {
                              "touser": self.wechat_to_user,
                              "template_id": self.wechat_template_id,
                              "url": url_desc,
                              "data": {
                                  "title": {"value": f"🚨 {title} - 新增{len(new_titles)}条", "color": "#FF0000"},
                                  "time": {"value": time.strftime('%Y-%m-%d %H:%M:%S'), "color": "#173177"},
                                  "content": {"value": f"新增内容：\n{new_titles_text}\n\n所有内容：\n{all_titles_text}", "color": "#173177"},
                                  "remark": {"value": "点击查看详情", "color": "#173177"}
                              }
                          }
                          r_alt = self.session.post(send_url, json=data_alt, timeout=15).json()
                          if r_alt.get("errcode") == 0:
                              print(f"✅ 微信消息发送成功(备用格式): {title}")
                              return True
                          else:
                              print(f"❌ 微信消息发送失败(备用格式): {r_alt.get('errmsg')}")
                              return False
                  except Exception as e:
                      print(f"[ERROR] 微信消息发送异常: {e}")
                      return False

              def run(self):
                  prev_state = self.load_state()
                  curr_state = {}
                  changed_urls = []

                  access_token = self.get_wechat_access_token()
                  if not access_token:
                      print("无法获取微信 access_token，退出")
                      return

                  for url in self.check_urls:
                      print(f"\n检查: {url}")
                      curr_hash, titles_with_links = self.get_content_hash(url)
                      if curr_hash is None:
                          continue
                          
                      prev_hash = prev_state.get(url, {}).get("hash")
                      prev_titles = prev_state.get(url, {}).get("titles", [])

                      if curr_hash != prev_hash:
                          # 找出新增的标题（只比较标题文本）
                          current_title_texts = [title for title, link in titles_with_links]
                          new_titles = [title for title in current_title_texts if title not in prev_titles]
                          
                          if new_titles:
                              print(f"发现 {len(new_titles)} 个新增标题: {new_titles}")
                              desc = self.url_descriptions.get(url, "页面更新")
                              self.send_wechat_template_message(access_token, desc, new_titles, titles_with_links, url)
                          else:
                              print("页面有更新，但未检测到新增标题")
                          
                          changed_urls.append(url)

                      # 保存当前状态（只保存标题文本，不保存链接）
                      curr_state[url] = {
                          "hash": curr_hash,
                          "titles": [title for title, link in titles_with_links]
                      }
                      time.sleep(1)

                  self.save_state(curr_state)
                  print(f"检查完成，共更新 {len(changed_urls)} 个 URL")

          if __name__ == "__main__":
              Monitor().run()
          EOF

      - name: Commit and push state file
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          if git diff --quiet url_state1.json; then
            echo "No changes detected in url_state1.json."
          else
            git add url_state1.json
            git commit -m "Update URL states [skip ci]" || echo "No changes to commit."
            git push origin HEAD || echo "Push failed"
          fi
