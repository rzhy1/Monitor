name: Monitor1 URL Changes

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'monitor1.yml'
      - 'url_state1.json'
  schedule:
    - cron: '0 23,0-13 * * *'

permissions:
  contents: write

jobs:
  check_url_changes:
    runs-on: ubuntu-latest
    env:
      WECHAT_APP_ID: ${{ secrets.WECHAT_APP_ID }}
      WECHAT_APP_SECRET: ${{ secrets.WECHAT_APP_SECRET }}
      WECHAT_TEMPLATE_ID: ${{ secrets.WECHAT_TEMPLATE_ID }}
      WECHAT_TO_USER: ${{ secrets.WECHAT_TO_USER }}
      CHECK_URLS: |
        https://ztb.cxjw.hangzhou.gov.cn:8092/search/queryContents.jhtml?titleOrCode=%E5%9F%8E%E5%B8%82%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A&status=5&channelId=2331
        https://ztb.cxjw.hangzhou.gov.cn:8092/search/queryContents.jhtml?titleOrCode=%E5%9F%8E%E5%B8%82%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A&status=5&channelId=2332
      URL_DESCRIPTIONS: |
        {
          "https://ztb.cxjw.hangzhou.gov.cn:8092/search/queryContents.jhtml?titleOrCode=%E5%9F%8E%E5%B8%82%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A&status=5&channelId=2331": "Êù≠Â∑ûÂú∞ÈìÅÊãõÊ†áËÆ°ÂàíÂèëÂ∏É",
          "https://ztb.cxjw.hangzhou.gov.cn:8092/search/queryContents.jhtml?titleOrCode=%E5%9F%8E%E5%B8%82%E8%BD%A8%E9%81%93%E4%BA%A4%E9%80%9A&status=5&channelId=2332": "Êù≠Â∑ûÂú∞ÈìÅÊãõÊ†áÈ¢ÑÂÖ¨Á§∫"
        }

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 urllib3

      - name: Check and notify
        run: |
          python - << "EOF"
          import os
          import json
          import hashlib
          import time
          import re
          import requests
          from bs4 import BeautifulSoup
          
          STATE_FILE = "url_state1.json"
          USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"

          class Monitor:
              def __init__(self):
                  self.session = requests.Session()
                  self.check_urls = [u.strip() for u in os.getenv("CHECK_URLS").splitlines() if u.strip()]
                  self.url_descriptions = json.loads(os.getenv("URL_DESCRIPTIONS"))
                  self.wechat_app_id = os.getenv("WECHAT_APP_ID")
                  self.wechat_app_secret = os.getenv("WECHAT_APP_SECRET")
                  self.wechat_template_id = os.getenv("WECHAT_TEMPLATE_ID")
                  self.wechat_to_user = os.getenv("WECHAT_TO_USER")

              def get_content_hash(self, url):
                  try:
                      r = self.session.get(url, headers={'User-Agent': USER_AGENT}, timeout=10)
                      r.raise_for_status()
                      soup = BeautifulSoup(r.text, 'html.parser')
                      titles = [t.get_text(strip=True) for t in soup.find_all('a')]
                      content = "\n".join(sorted(titles))
                      return hashlib.sha256(content.encode()).hexdigest(), titles
                  except Exception as e:
                      print(f"[ERROR] {url} Ëé∑ÂèñÂ§±Ë¥•: {e}")
                      return None, []

              def load_state(self):
                  if os.path.exists(STATE_FILE):
                      with open(STATE_FILE, 'r', encoding='utf-8') as f:
                          return json.load(f)
                  return {}

              def save_state(self, state):
                  with open(STATE_FILE, 'w', encoding='utf-8') as f:
                      json.dump(state, f, ensure_ascii=False, indent=2)

              def get_wechat_access_token(self):
                  url = f"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid={self.wechat_app_id}&secret={self.wechat_app_secret}"
                  try:
                      r = self.session.get(url, timeout=10).json()
                      return r.get("access_token")
                  except Exception as e:
                      print(f"[ERROR] Ëé∑Âèñ access_token Â§±Ë¥•: {e}")
                      return None

              def send_wechat_template_message(self, access_token, title, content, url_desc):
                  send_url = f"https://api.weixin.qq.com/cgi-bin/message/template/send?access_token={access_token}"
                  data = {
                      "touser": self.wechat_to_user,
                      "template_id": self.wechat_template_id,
                      "url": url_desc,
                      "data": {
                          "first": {"value": "ÊñáÁ´†Êõ¥Êñ∞ÊèêÈÜí üì¢", "color": "#173177"},
                          "keyword1": {"value": title, "color": "#173177"},
                          "keyword2": {"value": time.strftime('%Y-%m-%d'), "color": "#173177"},
                          "remark": {"value": f"{content}\nÁÇπÂáªËØ¶ÊÉÖÊü•ÁúãÂÆåÊï¥ÂÜÖÂÆπ", "color": "#173177"}
                      }
                  }
                  try:
                      r = self.session.post(send_url, json=data, timeout=15).json()
                      if r.get("errcode") == 0:
                          print(f"‚úÖ ÂæÆ‰ø°Ê∂àÊÅØÂèëÈÄÅÊàêÂäü: {title}")
                      else:
                          print(f"‚ùå ÂæÆ‰ø°Ê∂àÊÅØÂèëÈÄÅÂ§±Ë¥•: {r}")
                  except Exception as e:
                      print(f"[ERROR] ÂæÆ‰ø°Ê∂àÊÅØÂèëÈÄÅÂºÇÂ∏∏: {e}")

              def run(self):
                  prev_state = self.load_state()
                  curr_state = {}
                  changed_urls = []

                  access_token = self.get_wechat_access_token()
                  if not access_token:
                      print("Êó†Ê≥ïËé∑ÂèñÂæÆ‰ø° access_tokenÔºåÈÄÄÂá∫")
                      return

                  for url in self.check_urls:
                      print(f"\nÊ£ÄÊü•: {url}")
                      curr_hash, titles = self.get_content_hash(url)
                      prev_hash = prev_state.get(url, {}).get("hash")

                      if curr_hash != prev_hash:
                          new_titles = [t for t in titles if t not in prev_state.get(url, {}).get("titles", [])]
                          if new_titles:
                              content_str = "\n".join(new_titles)
                              self.send_wechat_template_message(access_token, self.url_descriptions.get(url, "È°µÈù¢Êõ¥Êñ∞"), content_str, url)
                          else:
                              print("È°µÈù¢ÊúâÊõ¥Êñ∞Ôºå‰ΩÜÊú™Ê£ÄÊµãÂà∞Êñ∞Â¢ûÊ†áÈ¢ò")
                          changed_urls.append(url)

                      curr_state[url] = {"hash": curr_hash, "titles": titles}
                      time.sleep(1)

                  self.save_state(curr_state)
                  print(f"Ê£ÄÊü•ÂÆåÊàêÔºåÂÖ±Êõ¥Êñ∞ {len(changed_urls)} ‰∏™ URL")

          if __name__ == "__main__":
              Monitor().run()
          EOF

      - name: Commit and push state file
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          if git diff --quiet url_state1.json; then
            echo "No changes detected in url_state1.json."
          else
            git add url_state1.json
            git commit -m "Update URL states [skip ci]" || echo "No changes to commit."
            git push origin HEAD || echo "Push failed"
          fi
